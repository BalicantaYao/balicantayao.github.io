<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Balicanta Yao</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://balicanta.tw/"/>
  <updated>2019-06-22T14:06:13.170Z</updated>
  <id>http://balicanta.tw/</id>
  
  <author>
    <name>Balicanta Yao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>為什麼我選擇使用 Like Coin</title>
    <link href="http://balicanta.tw/2019/06/20/why-i-choose-like-coin/"/>
    <id>http://balicanta.tw/2019/06/20/why-i-choose-like-coin/</id>
    <published>2019-06-19T20:23:42.000Z</published>
    <updated>2019-06-22T14:06:13.170Z</updated>
    
    <content type="html"><![CDATA[<h2 id="從-Medium-撤退"><a href="#從-Medium-撤退" class="headerlink" title="從 Medium 撤退"></a>從 Medium 撤退</h2><p>在過去一年 Medium 在台灣寫作者間爆紅，也讓我在 2017 、 2018 大部分的筆記都放到 Medium 上，在某一天上班遲到的早晨，突然覺得工程師的筆記放在 Medium 感覺哪裡怪怪的，畢竟 <a href="https://www.freecodecamp.org" target="_blank" rel="noopener">FreeCodeCamp</a> 也撤離了 Medium。</p><p>在尋找替代方案的時候，發現 <a href="https://hexo.io/zh-tw/" target="_blank" rel="noopener">Hexo</a> 寫作體驗真的非常驚喜，可以在我常用 Intellij 直覺的寫作，產生 static site , deploy 都不麻煩，同時透過 Github Page 來幫忙 Host，成本相當低。</p><p>最重要的是那種所有的內容都擁有的感覺，還有 Hexo 的作者是個台灣人，謝謝 <a href="https://github.com/tommy351" target="_blank" rel="noopener">Tommy 大大</a>。</p><h2 id="試著裝上-Google-Adsense"><a href="#試著裝上-Google-Adsense" class="headerlink" title="試著裝上 Google Adsense"></a>試著裝上 Google Adsense</h2><p>這整個 Site 除了花了時間外，另外也花了 700 塊台幣，是用來買 <a href="http://balicanta.tw">balicanta.tw</a> Domain，而我只有一個小小的期待，如果這個 Site 扣掉我花的時間，可以不要花其它的費用，這樣一個簡單的期待。</p><p>我試著使用 Google Adsense，但廣告真的跑起來以後，整個閱讀體驗實在不是很舒服，所以我開始尋找有沒有除了廣告以外，有機會滿足小小期待的方法。</p><h2 id="於是我發現了-Like-Coin"><a href="#於是我發現了-Like-Coin" class="headerlink" title="於是我發現了 Like Coin"></a>於是我發現了 Like Coin</h2><p>Like Coin 是個區塊鍊解決方案，希望<strong>化讚為賞</strong>，亦即透過讀者對文章的點讚，轉成對寫作者的直接鼓勵。</p><p>本來對區塊鍊、數字貨幣這類型的概念其實是非常反感的，因為我認為 ICO 終究是一場騙局，大家明顯的在賺快錢，區塊鍊並沒有實際落地的應用，但很有可能是我認識的不夠深刻。</p><p>而選擇掛上 Like Coin 在 Blog 上，實際上是一個非常矛盾的決定，Like Coin 換成新台幣的路線其實非常的漫長，可能需要先換成 BTC 再換成 TWD，是不是真的能預期的每年幫我賺 700 塊台幣，我是很沒有把握的。</p><p>但是我想如果每個閱讀者都能在我的文章上，幫我點個 Like ，我想對寫作者是很大的鼓勵，而這些 Like Coin 最後能拿到多少就看運氣吧，也許可能跟其它的 ICO 一樣會變的一文不值。</p><p>但最後，其實想再相信幾件事：</p><blockquote><p>世界上真的有人是為了理想在做事，如果有，我是不是應該用我的方法支持他</p></blockquote><blockquote><p>我相信使用者是會為了有價值的內容而鼓勵作者。</p></blockquote><p>如果你還沒有註冊 Like Coin，你可以透過我的連結申請 <a href="https://like.co/ref/balicanta-yao" target="_blank" rel="noopener">https://like.co/ref/balicanta-yao</a>，這樣我會得到接近 0.01 美金的回饋，而你不用付出任何一塊錢。 </p><p>如果這篇文章給你一點想法，你也可以幫我拍 5 下。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;從-Medium-撤退&quot;&gt;&lt;a href=&quot;#從-Medium-撤退&quot; class=&quot;headerlink&quot; title=&quot;從 Medium 撤退&quot;&gt;&lt;/a&gt;從 Medium 撤退&lt;/h2&gt;&lt;p&gt;在過去一年 Medium 在台灣寫作者間爆紅，也讓我在 2017 、
      
    
    </summary>
    
      <category term="LikeCoin" scheme="http://balicanta.tw/categories/LikeCoin/"/>
    
    
  </entry>
  
  <entry>
    <title>StringUtils isBlank 以及 isEmpty 的差別</title>
    <link href="http://balicanta.tw/2019/06/18/stringutils-isblank-isempty/"/>
    <id>http://balicanta.tw/2019/06/18/stringutils-isblank-isempty/</id>
    <published>2019-06-18T14:25:42.000Z</published>
    <updated>2019-06-18T15:11:23.355Z</updated>
    
    <content type="html"><![CDATA[<p>常用的 <a href="https://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/StringUtils.html" target="_blank" rel="noopener">Apache Commons StringUtils</a> 裡有兩個常常容易搞混的方法 isBlank 以及 isEmpty。</p><h2 id="isBlank"><a href="#isBlank" class="headerlink" title="isBlank"></a>isBlank</h2><p>isBlank 是判斷這個字串是否為 <strong>內容空白字串</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">StringUtils.isBlank(<span class="keyword">null</span>)      = <span class="keyword">true</span></span><br><span class="line">StringUtils.isBlank(<span class="string">""</span>)        = <span class="keyword">true</span></span><br><span class="line">StringUtils.isBlank(<span class="string">" "</span>)       = <span class="keyword">true</span></span><br><span class="line">StringUtils.isBlank(<span class="string">"bob"</span>)     = <span class="keyword">false</span></span><br><span class="line">StringUtils.isBlank(<span class="string">"  bob  "</span>) = <span class="keyword">false</span></span><br></pre></td></tr></table></figure><h2 id="isEmpty"><a href="#isEmpty" class="headerlink" title="isEmpty"></a>isEmpty</h2><p>isEmpty 是判斷這個字串是否為 <strong>空字串</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">StringUtils.isEmpty(<span class="keyword">null</span>)      = <span class="keyword">true</span></span><br><span class="line">StringUtils.isEmpty(<span class="string">""</span>)        = <span class="keyword">true</span></span><br><span class="line">StringUtils.isEmpty(<span class="string">" "</span>)       = <span class="keyword">false</span></span><br><span class="line">StringUtils.isEmpty(<span class="string">"bob"</span>)     = <span class="keyword">false</span></span><br><span class="line">StringUtils.isEmpty(<span class="string">"  bob  "</span>) = <span class="keyword">false</span></span><br></pre></td></tr></table></figure><h2 id="關鍵差異"><a href="#關鍵差異" class="headerlink" title="關鍵差異"></a>關鍵差異</h2><p>在空格字串裡的判斷上，兩個有關鍵的不一樣。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">StringUtils.isBlank(<span class="string">" "</span>)       = <span class="keyword">true</span></span><br><span class="line"></span><br><span class="line">StringUtils.isEmpty(<span class="string">" "</span>)       = <span class="keyword">false</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;常用的 &lt;a href=&quot;https://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/StringUtils.html&quot; target=&quot;_blank&quot; rel=&quot;noope
      
    
    </summary>
    
      <category term="Java" scheme="http://balicanta.tw/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>Java 異常類別</title>
    <link href="http://balicanta.tw/2019/06/15/java-basic/exception/"/>
    <id>http://balicanta.tw/2019/06/15/java-basic/exception/</id>
    <published>2019-06-15T14:00:42.000Z</published>
    <updated>2019-06-15T15:05:24.107Z</updated>
    
    <content type="html"><![CDATA[<p>在程式開發的過程中，常常會遇到一些異想不到的錯誤，例如：</p><ul><li>使用者輸入了一個你猜也沒猜到的數值</li><li>要把資料寫到檔案裡，但發現磁碟空間不夠</li><li>需要連上網路去抓一個檔案，但電腦現在沒有接上網路</li></ul><p>無論這些異想不到的錯誤，是屬於使用者造成的，或是使用者的電腦軟硬體造成，Java 將這些狀況，視為例外或是異常，也是 Exception。</p><p>Java 將 Exception 分為三個主要的類別：</p><ul><li><p>必須處理的異常(Checked Exception)</p></li><li><p>程式運作期間的異常(Runtime Exception)</p></li><li><p>錯誤 (Errors)</p></li></ul><h2 id="必須處理的異常-Checked-Exception"><a href="#必須處理的異常-Checked-Exception" class="headerlink" title="必須處理的異常(Checked Exception)"></a>必須處理的異常(Checked Exception)</h2><p>這類型的異常最大的特色是，在編輯期間會強迫開發人員處理，最常見的例子是 FileNotFoundException 找不到檔案的異常，例如想要使用 FileReader 去讀取一個檔案的時候，編譯器(Compiler) 會強迫開發者處理這個異常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileNotFound_Demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">      File file = <span class="keyword">new</span> File(<span class="string">"E://file.txt"</span>);</span><br><span class="line">      <span class="comment">// FileReader 建構子會丟出 FileNotFoundException</span></span><br><span class="line">      <span class="comment">// 因為這段程式並沒有處理 FileNotFoundException，所以無法編譯</span></span><br><span class="line">      FileReader fr = <span class="keyword">new</span> FileReader(file); </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="程式運作期間的異常-Runtime-Exception、-Unchecked-Exception"><a href="#程式運作期間的異常-Runtime-Exception、-Unchecked-Exception" class="headerlink" title="程式運作期間的異常(Runtime Exception、 Unchecked Exception)"></a>程式運作期間的異常(Runtime Exception、 Unchecked Exception)</h2><p>這類型的異常編譯器並不會強迫開發者處理，所以被稱作為 Unchecked Exception 或是 Runtime Exception。最常見的就是 ArrayIndexOutOfBoundsException。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Unchecked_Demo</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 這段程式碼是可以編譯，但是執行後會產生 ArrayIndexOutOfBoundsException</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> num[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">      System.out.println(num[<span class="number">5</span>]);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="錯誤-Errors"><a href="#錯誤-Errors" class="headerlink" title="錯誤 (Errors)"></a>錯誤 (Errors)</h2><p>錯誤與異常可以說是完全不同的東西，錯誤有幾個特性：</p><ul><li>嚴重程度比較高</li><li>程式比較難處理的</li><li>難以恢復的</li></ul><p>常見的例如，透過遞迴解決問題時候要小心的 StackOverFlowError：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StackOverflow</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> i)</span> </span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">        <span class="comment">// No correct as base condition leads to </span></span><br><span class="line">        <span class="comment">// non-stop recursion. </span></span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>) </span><br><span class="line">            <span class="keyword">return</span>; </span><br><span class="line">        <span class="keyword">else</span> &#123; </span><br><span class="line">            test(i++); </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorEg</span> </span>&#123; </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// eg of StackOverflowError </span></span><br><span class="line">        StackOverflow.test(<span class="number">5</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在程式開發的過程中，常常會遇到一些異想不到的錯誤，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用者輸入了一個你猜也沒猜到的數值&lt;/li&gt;
&lt;li&gt;要把資料寫到檔案裡，但發現磁碟空間不夠&lt;/li&gt;
&lt;li&gt;需要連上網路去抓一個檔案，但電腦現在沒有接上網路&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
      
    
    </summary>
    
      <category term="Java" scheme="http://balicanta.tw/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>安裝 Hexo</title>
    <link href="http://balicanta.tw/2019/05/28/install-hexo/"/>
    <id>http://balicanta.tw/2019/05/28/install-hexo/</id>
    <published>2019-05-27T16:27:05.000Z</published>
    <updated>2019-06-08T04:25:01.201Z</updated>
    
    <content type="html"><![CDATA[<p>每隔幾年就會想起來，自己曾經會紀錄一點的東西，而東西都是散落的，從一開始的 Wordpress、Ghost、Medium，到最後什麼都沒有繼續下去，非常符合我很容易放棄的個性。</p><p>在一個早晨的沖澡中突然又想起了這件事，啊，我該記錄點什麼吧？不是有寫 Medium 嗎？我又覺得 Medium 不知道哪裡不對勁，可能是最近 Medium 人太多太熱鬧，我喜歡遠離人群。</p><p>找著找著我發現 static site generator 好像比較符合我現在的感覺，儘管幾年前用 Jeklly 的感覺不太好。</p><h2 id="安裝-Hexo"><a href="#安裝-Hexo" class="headerlink" title="安裝 Hexo"></a>安裝 Hexo</h2><ul><li>裝 NPM </li><li>裝 Git</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><h2 id="創建-Hexo"><a href="#創建-Hexo" class="headerlink" title="創建 Hexo"></a>創建 Hexo</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><h2 id="建立文章"><a href="#建立文章" class="headerlink" title="建立文章"></a>建立文章</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">## 建立草稿</span><br><span class="line">hexo new draft &lt;title&gt;</span><br><span class="line"></span><br><span class="line">## 建立 Post</span><br><span class="line">hexo new post &lt;title&gt;</span><br></pre></td></tr></table></figure><h2 id="啟動-Hexo-Server"><a href="#啟動-Hexo-Server" class="headerlink" title="啟動 Hexo Server"></a>啟動 Hexo Server</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">包含 Drafts</span><br><span class="line">hexo server --draft</span><br></pre></td></tr></table></figure><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">## 先產生</span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">## 後部署</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;每隔幾年就會想起來，自己曾經會紀錄一點的東西，而東西都是散落的，從一開始的 Wordpress、Ghost、Medium，到最後什麼都沒有繼續下去，非常符合我很容易放棄的個性。&lt;/p&gt;
&lt;p&gt;在一個早晨的沖澡中突然又想起了這件事，啊，我該記錄點什麼吧？不是有寫 Medium
      
    
    </summary>
    
      <category term="Hexo" scheme="http://balicanta.tw/categories/Hexo/"/>
    
    
  </entry>
  
  <entry>
    <title>Read Excel File Using POI Meet GC overhead limit exceeded</title>
    <link href="http://balicanta.tw/2016/08/24/read-excel-file-using-poi-meet-gc-overhead-limit-exceeded/"/>
    <id>http://balicanta.tw/2016/08/24/read-excel-file-using-poi-meet-gc-overhead-limit-exceeded/</id>
    <published>2016-08-24T02:56:01.000Z</published>
    <updated>2019-06-08T04:34:36.201Z</updated>
    
    <content type="html"><![CDATA[<p>First about gc overhead</p><p><a href="http://stackoverflow.com/questions/33368612/gc-overhead-limit-exceeded-with-apache-poi" target="_blank" rel="noopener">http://stackoverflow.com/questions/33368612/gc-overhead-limit-exceeded-with-apache-poi</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;First about gc overhead&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/33368612/gc-overhead-limit-exceeded-with-apache-poi&quot; target=&quot;_
      
    
    </summary>
    
      <category term="Java" scheme="http://balicanta.tw/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>產出 SVN Diff List</title>
    <link href="http://balicanta.tw/2016/01/25/chan-chu-svn-diff-list/"/>
    <id>http://balicanta.tw/2016/01/25/chan-chu-svn-diff-list/</id>
    <published>2016-01-25T02:24:59.000Z</published>
    <updated>2019-05-29T15:37:02.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>產出版本間檔案差異列表 <code>svn diff -r 103791:104066 --summarize</code></li><li>產出版本間檔案差異明細 <code>svn diff -r 103791:104066 &gt;&gt; change-list-20160125.txt</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;產出版本間檔案差異列表 &lt;code&gt;svn diff -r 103791:104066 --summarize&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;產出版本間檔案差異明細 &lt;code&gt;svn diff -r 103791:104066 &amp;gt;&amp;gt; change
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JBoss EAP Connection Pool Validation 設定</title>
    <link href="http://balicanta.tw/2015/12/25/jboss-connection-pool/"/>
    <id>http://balicanta.tw/2015/12/25/jboss-connection-pool/</id>
    <published>2015-12-24T21:40:13.000Z</published>
    <updated>2019-06-08T04:32:07.110Z</updated>
    
    <content type="html"><![CDATA[<p>Database connection pool 在應用系統中是個普遍會採用的設定，使用 Connection pool 的好處就像使用環保餐具一樣，用過的 Connection 不丟棄 <a href="http://stackoverflow.com/questions/457287/what-is-the-benefit-of-connection-and-statement-pooling" target="_blank" rel="noopener">注</a>，每次重新建立 Database Connection 的成本太大，所以應用系統中通常都會設定 Database Connection Pool。</p><p>Database connection pool 可以從 Application 設定，也可以從 AP Server 來設定，如果在 Application 設定，通常使用 <a href="https://commons.apache.org/proper/commons-dbcp/" target="_blank" rel="noopener">DBCP</a>，如果讓各 AP Server 來設定，那設定方式可能就有些不一樣。</p><p>最近使用 JBoss 來設定 Database connection pool 的時候，發現有這麼一個情形，如果 Database shutdown 以後， connection pool 並不會自己重新 reconnect，直到重啟 Server 為止。後來才知道，原來 JBoss EAP Connection pool 的設定不特別設定，是不會自己重連的。</p><h4 id="Connection-Pool-Validation-設定"><a href="#Connection-Pool-Validation-設定" class="headerlink" title="Connection Pool Validation 設定"></a>Connection Pool Validation 設定</h4><img src="/images/jboss-connection-pool.png" class="[class names]"><ul><li>Valid Connection Checker  - 各家 Database 對於 Connection Valid 的機制可能有一些差異，所以會有不同的 Checker。 <ul><li>Oracle: <code>org.jboss.resource.adapter.jdbc.vendor.OracleValidConnectionChecker</code></li><li>SQLServer: <code>org.jboss.jca.adapters.extensions.mssql.MSSQLValidConnectionChecker</code></li></ul></li><li>Check Valid SQL - 用來檢查 Connection 是否正常運作的 SQL。</li><li>Valid on match - 已經接上的 Connection 是否需要檢查，這個值似乎在 <code>Background Validation</code> 出現後，就不是這麼需要在意了，預設為 <code>True</code>。</li><li>Background Validation - 這是新版 JBoss (After 4.0.5) 才有的設定值，在處理 Valid Connection 的時候，會開另外一個 Thread 來處理，如果設定了<code>Validation Mills</code> 那這個值就必須為 <code>True</code>。</li><li>Validation Mills - 多久檢查一次。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Database connection pool 在應用系統中是個普遍會採用的設定，使用 Connection pool 的好處就像使用環保餐具一樣，用過的 Connection 不丟棄 &lt;a href=&quot;http://stackoverflow.com/questions
      
    
    </summary>
    
      <category term="JBoss" scheme="http://balicanta.tw/categories/JBoss/"/>
    
    
  </entry>
  
  <entry>
    <title>Intellij  小秘訣</title>
    <link href="http://balicanta.tw/2015/12/13/intellij-tips/"/>
    <id>http://balicanta.tw/2015/12/13/intellij-tips/</id>
    <published>2015-12-12T22:54:13.000Z</published>
    <updated>2019-06-08T04:25:47.064Z</updated>
    
    <content type="html"><![CDATA[<iframe allowfullscreen frameborder="0" height="349" src="https://www.youtube.com/embed/eq3KiAH4IBI?feature=oembed" width="620"></iframe><p>今年 Intellij 幾乎已經完全取代 Eclipse 成為我工作上的 IDE，一開始其實只是因為 Eclipse 沒辦法提供透過 Camel case 的方式來找到特定的 class，所以才開始找別的 IDE ，不過現在 Eclipse 似乎也行了。</p><p>慢慢的用著 Intellij 發現 JetBrain 真的是很用心在做這個 IDE，很多小細節都幫忙處理了，不過缺點還是相對吃了多一點的資源，還有些人會介意需要安裝。</p><p>用 Intellij 有幾個好處：</p><ul><li>如果你會有多語言的需求 ( Python, Javascript..)  Hotkey 記一次就行了，因為 Jetbrain 有出 Pycharm、Webstrom 等其它 IDE，就是要錢就是了</li><li>以前還會用一下 DBVisulizer 來當作 DBMS，但現在 Intellij 也把 DBMS 整進來了，雖然還是沒有  DBVisulizer 好用，但查查資料，下下 SQL 也算是可以用了。</li><li>每個動作，幾乎都找得相對應的 Hotkey 來解決，不用一直玩滑鼠。</li><li>貼心的 Debug 功能，在你下中斷點的時候，會將所有的變數內容顯示在該行後方。</li><li>強大的 Plugin 像 IdeaVim 這個就整合的非常好。</li></ul><p>待改進：</p><ul><li>在 Mac 裡 Intellij 對於中文輸入法的辨識有點怪怪的。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;iframe allowfullscreen frameborder=&quot;0&quot; height=&quot;349&quot; src=&quot;https://www.youtube.com/embed/eq3KiAH4IBI?feature=oembed&quot; width=&quot;620&quot;&gt;&lt;/iframe&gt;



      
    
    </summary>
    
      <category term="IntelliJ" scheme="http://balicanta.tw/categories/IntelliJ/"/>
    
    
  </entry>
  
  <entry>
    <title>JPA 中 GeneratedValue 的三種策略</title>
    <link href="http://balicanta.tw/2015/11/09/jpa-generated-value/"/>
    <id>http://balicanta.tw/2015/11/09/jpa-generated-value/</id>
    <published>2015-11-09T00:16:06.000Z</published>
    <updated>2019-06-08T04:33:44.009Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hibernate-中指定-Primary-Key-的方法"><a href="#Hibernate-中指定-Primary-Key-的方法" class="headerlink" title="Hibernate 中指定 Primary Key 的方法"></a>Hibernate 中指定 Primary Key 的方法</h3><p>通常在 Hibernate 中定義一個簡單的 Pojo</p><ul><li>@Entity 表示是一個對應到 Database Table 的 Object。</li><li>@Id 指定某個欄位為 Primary Key，如果沒有指定會出現錯誤。</li><li>@GeneratedValue 指定 ID 的生成方式。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Entity</span><br><span class="line">public class City implements Serializable&#123;</span><br><span class="line">@Id</span><br><span class="line">@GeneratedValue(strategy = GenerationType.AUTO)</span><br><span class="line">private Long id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="關於-GeneratedValue-的產生策略"><a href="#關於-GeneratedValue-的產生策略" class="headerlink" title="關於 GeneratedValue 的產生策略"></a>關於 GeneratedValue 的產生策略</h3><p>其實在定義 Hibernate 所需要的 Class 的時候，是可以不定義 <code>GeneratedValue</code>，而 Hibernate 所對應的，就是一個 not null 的整數，但這樣在 Insert 資料的時候必須要自己指定 ID，比較少的情境會這麼做，通常會希望 ID 可以自行生成，這也就是為什麼常常看到 <code>@Id</code>和 <code>@GeneratedValue</code> 經常性的並存。</p><p>也因為 Hibernate 會遇見不同的 Database 所以在處理 <code>GeneratedValue</code>，容納了不同 Database 的考量。</p><p>#### </p><h4 id="GenerationType-IDENTITY"><a href="#GenerationType-IDENTITY" class="headerlink" title="GenerationType.IDENTITY"></a>GenerationType.IDENTITY</h4><p>常見的 Mysql, MSSQL 都是常用這種方式，相對應的 DDL Script 長這樣子，也就是自增量的意思。<br><code>id BIGINT NOT NULL AUTO_INCREMENT</code></p><p>#### </p><h4 id="GenerationType-SEQUENCE"><a href="#GenerationType-SEQUENCE" class="headerlink" title="GenerationType.SEQUENCE"></a>GenerationType.SEQUENCE</h4><p>在使用這種策略來產生 ID 的時候，通常會給入另一個 Annotation <code>@SequenceGenerator</code>, 會類似下面的定義方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Id</span><br><span class="line">@SequenceGenerator( name = &quot;userSeq&quot;, sequenceName = &quot;user_id&quot;, allocationSize = 1, initialValue = 1 )</span><br><span class="line">@GeneratedValue( strategy = GenerationType.SEQUENCE, generator = &quot;userSeq&quot;)</span><br></pre></td></tr></table></figure><p>在 Hibernate 裡面即便忘了指定 <code>generator</code> 也不會出錯，猜測應該是給了一組預設的 generator。<br><a href="http://stackoverflow.com/a/4502062" target="_blank" rel="noopener">有人也建議在 Postgrel 裡面不應該用 GenerationType.SEQUENCE</a></p><p>#### </p><h4 id="GenerationType-TABLE"><a href="#GenerationType-TABLE" class="headerlink" title="GenerationType.TABLE"></a>GenerationType.TABLE</h4><p>這種策略比較少見一些，當不希望應用程式與某一種 Database Engine 綁死的時候，可以使用這種方法，透過另外一個表格來定義 ID，從 SQL script 來看會建立出下面這張表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE APP_SEQ_STORE</span><br><span class="line">(</span><br><span class="line">APP_SEQ_NAME VARCHAR(255) NOT NULL,</span><br><span class="line">APP_SEQ_VALUE BIGINT NOT NULL,</span><br><span class="line">PRIMARY KEY(APP_SEQ_NAME)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>也就是多個資料表的 ID 都會往這個表裡面放，而 Hibernate 的定義會增加一個 <code>TableGenerator</code> 的 Annotation 來決定，應該和哪個 Table 對應。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Id</span><br><span class="line">@TableGenerator(...)</span><br><span class="line">@GeneratedValue( strategy = GenerationType.TABLE, generator = &quot;appSeqStore&quot; )</span><br><span class="line">private Long id;</span><br></pre></td></tr></table></figure><p>Reference: <a href="http://www.developerscrappad.com/408/java/java-ee/ejb3-jpa-3-ways-of-generating-primary-key-through-generatedvalue/" target="_blank" rel="noopener">3 Ways Of Generating Primary Key Through @GeneratedValue</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Hibernate-中指定-Primary-Key-的方法&quot;&gt;&lt;a href=&quot;#Hibernate-中指定-Primary-Key-的方法&quot; class=&quot;headerlink&quot; title=&quot;Hibernate 中指定 Primary Key 的方法&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="JPA" scheme="http://balicanta.tw/categories/JPA/"/>
    
    
  </entry>
  
  <entry>
    <title>Praxis 22. Do not return from a try block</title>
    <link href="http://balicanta.tw/2015/06/30/praxis-22-do-not-return-from-a-try-block/"/>
    <id>http://balicanta.tw/2015/06/30/praxis-22-do-not-return-from-a-try-block/</id>
    <published>2015-06-30T00:42:52.000Z</published>
    <updated>2019-06-15T14:40:17.093Z</updated>
    
    <content type="html"><![CDATA[<h3 id="不要在-Try-Catch-中執行-return"><a href="#不要在-Try-Catch-中執行-return" class="headerlink" title="不要在 Try Catch 中執行 return"></a>不要在 Try Catch 中執行 return</h3><p>離開 try 區塊有三種可能：</p><ul><li>拋出異常</li><li>try 區塊正常的結束</li><li>在 try 區段執行了 return, break 或是 continue。</li></ul><p>然後千萬要記住 <strong>無論是否 catch exception ，都將進入 finally block</strong>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public int confusedReturn()&#123;</span><br><span class="line">    try&#123;</span><br><span class="line">        return 2;</span><br><span class="line">    &#125; finally&#123;</span><br><span class="line">        return 4;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這段程式碼很容易讓人混亂，到底最後回傳 2 還是回傳 4 ( 答案是回傳 4 )。過去以為看到 return 程式會立即回傳，在這樣的條件下就失效了，也因為這個原因會讓開發者的除錯變得相當困難。</p><p>為了避免這樣的情形發生，盡可能不要在 Try catch 的 block 進行 return。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;不要在-Try-Catch-中執行-return&quot;&gt;&lt;a href=&quot;#不要在-Try-Catch-中執行-return&quot; class=&quot;headerlink&quot; title=&quot;不要在 Try Catch 中執行 return&quot;&gt;&lt;/a&gt;不要在 Try Catch 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Praxis 21. Use finally to avoid resource leaks.</title>
    <link href="http://balicanta.tw/2015/06/29/praxis-21-use-finally-to-avoid-resource-leaks/"/>
    <id>http://balicanta.tw/2015/06/29/praxis-21-use-finally-to-avoid-resource-leaks/</id>
    <published>2015-06-28T23:47:58.000Z</published>
    <updated>2019-06-15T14:40:17.088Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Finally-的實用性"><a href="#Finally-的實用性" class="headerlink" title="Finally 的實用性"></a>Finally 的實用性</h2><p>從過去幾個 Praxis 可以得知無論是否 catch exception 都會執行 finally，這樣的特性在兩個情境下特別的實用：</p><ul><li>維護物件內部的狀況</li><li>清理 non-memory 的資源</li></ul><p>如果打開一個 Socket 或是 File ，都可能會拋出 <code>IOException</code> 這個時候 finally 就會顯現用處。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public static void main (String args[])&#123;</span><br><span class="line">    ServerSocket serverSocket = new ServerSocket(199);</span><br><span class="line">    try&#123;</span><br><span class="line">        Socket socket =  serverSocket.accept();</span><br><span class="line">    &#125; finally&#123;</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>無論是否產生 <code>IOException</code> 都會跑到 finally 裡面，把 socket 關掉，確保資源不會洩露。</p><h3 id="Java-7-中的-Try-With-Resources"><a href="#Java-7-中的-Try-With-Resources" class="headerlink" title="Java 7 中的 Try With Resources"></a>Java 7 中的 Try With Resources</h3><p>Java 7 後有一項小修正稱作 <strong>Try-with-resources</strong> ，也就是在離開 Try 區塊的時候，自動關閉資源，這在其它語言像 Python，其實都已經有實作了，主要原因是開發者還是很容易會忘記要 close resource，所以從 Java 7 以後，這類型的程式碼可以這樣寫：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">try(OutputStream output = new FileOutputStream(file))&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如此一來簡單許多，就不會忘記關 resource 了！</p><h3 id="Try-With-Resources-實現原理"><a href="#Try-With-Resources-實現原理" class="headerlink" title="Try With Resources 實現原理"></a>Try With Resources 實現原理</h3><p>這類型的 resource ，在 Java 7 其實都實現了一個 <code>AutoCloseable</code> 的 interface ，這個 interface 就只有一個很簡單的方法就是 <code>close</code>，所以應該是在 compile 處理的時候會在 bytecode 自動加上這段程式碼，以解決開發者老是忘了處理 resource 的問題。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Finally-的實用性&quot;&gt;&lt;a href=&quot;#Finally-的實用性&quot; class=&quot;headerlink&quot; title=&quot;Finally 的實用性&quot;&gt;&lt;/a&gt;Finally 的實用性&lt;/h2&gt;&lt;p&gt;從過去幾個 Praxis 可以得知無論是否 catch ex
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Praxis 20. Be specific and comprehensive with the throws clause.</title>
    <link href="http://balicanta.tw/2015/06/27/praxis-20-be-specific-and-comprehensive-with-the-throws-clause/"/>
    <id>http://balicanta.tw/2015/06/27/praxis-20-be-specific-and-comprehensive-with-the-throws-clause/</id>
    <published>2015-06-26T21:15:46.000Z</published>
    <updated>2019-06-15T14:40:17.100Z</updated>
    
    <content type="html"><![CDATA[<h3 id="盡可能拋出細部的異常"><a href="#盡可能拋出細部的異常" class="headerlink" title="盡可能拋出細部的異常"></a>盡可能拋出細部的異常</h3><p>在 Java 的設計裡面，異常也具備繼承體系，所以下面的例子是可以通過 Compile 的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class ParentException&#123;&#125;</span><br><span class="line">class SubException extends ParentException&#123;&#125;</span><br><span class="line"></span><br><span class="line">public class compileExceptionDemo&#123;</span><br><span class="line">    public void throwException(int num) throws ParentException &#123;</span><br><span class="line">         if (num &gt; 0)&#123;</span><br><span class="line">            throw new ParentException();</span><br><span class="line">         &#125; else &#123;</span><br><span class="line">            throw new SubException()</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這樣的寫法，對於 Method 的調用者，無法清楚的明白，這個 Method 會產生的所有異常，比較好的 Method Signature 是下面這種：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public void throwException(int num) throws ParentException, SubExceptions</span><br></pre></td></tr></table></figure><p>你需要把所有 Exception 明確的寫出來，在 method signature 寫出來。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;盡可能拋出細部的異常&quot;&gt;&lt;a href=&quot;#盡可能拋出細部的異常&quot; class=&quot;headerlink&quot; title=&quot;盡可能拋出細部的異常&quot;&gt;&lt;/a&gt;盡可能拋出細部的異常&lt;/h3&gt;&lt;p&gt;在 Java 的設計裡面，異常也具備繼承體系，所以下面的例子是可以通過 Co
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>如何測試會拋出 Exception 的 Method</title>
    <link href="http://balicanta.tw/2015/06/26/how-to-test-throw-exception/"/>
    <id>http://balicanta.tw/2015/06/26/how-to-test-throw-exception/</id>
    <published>2015-06-25T20:23:42.000Z</published>
    <updated>2019-06-08T04:23:17.753Z</updated>
    
    <content type="html"><![CDATA[<h3 id="拋出-Exception-的方法"><a href="#拋出-Exception-的方法" class="headerlink" title="拋出 Exception 的方法"></a>拋出 Exception 的方法</h3><p>在開發的過程中，難免會遇到一些方法，不會有直接的回傳結果，也許只會在過程中會產生 Exception，正常執行以後，並不會有任何反應，這時候透過傳統的 Assert 沒有辦法測出想要測試的內容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public void checkEmptyUserName(String username)&#123;</span><br><span class="line">    if(StringUtils.isBlank(userName))&#123;</span><br><span class="line">        throws new LoginFailedException(&quot;Username is empty!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Junit-Rule"><a href="#Junit-Rule" class="headerlink" title="Junit Rule"></a>Junit Rule</h3><p>Junit Rule 從 Junit 4.7 以後開始提供，主要提供了這種非典型需求的解決辦法， Rule 主要有幾種功能：</p><ul><li>對方法的測試時間設置 Timeout</li><li>測試方法是否拋出預期的異常 <code>ExpectedException</code></li><li>避免方法預到錯誤就停下來，可以透過 <code>ErrorCollector</code> 蒐集起來</li><li>…</li></ul><p>需要測試 Exception 是否如預期的產生，我們當然就是透過 <code>ExpectedException</code> 來處理：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public static class verfiyExceptionTest&#123;</span><br><span class="line">  @Rule</span><br><span class="line">  public ExpectedException thrown= ExpectedException.none();</span><br><span class="line"></span><br><span class="line">  @Test</span><br><span class="line">  public void throwsExceptionWithMessage() &#123;</span><br><span class="line">    // 預期 LoginFailed 會產生以及對應的 Exception message</span><br><span class="line">    thrown.expect(LoginFailedException.class);</span><br><span class="line">    thrown.expectMessage(startsWith(&quot;UserName&quot;));</span><br><span class="line"></span><br><span class="line">    // 執行測試</span><br><span class="line">    checkEmptyUserName(StringUtils.Empty);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>透過 ExpectedException 的協助，不單可以測試出是否測出預期的 Exception 同時也可以確認 Exception message 是否如預期，在測試的粒度上，又往前了一步。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;拋出-Exception-的方法&quot;&gt;&lt;a href=&quot;#拋出-Exception-的方法&quot; class=&quot;headerlink&quot; title=&quot;拋出 Exception 的方法&quot;&gt;&lt;/a&gt;拋出 Exception 的方法&lt;/h3&gt;&lt;p&gt;在開發的過程中，難免會遇到一
      
    
    </summary>
    
      <category term="UnitTest" scheme="http://balicanta.tw/categories/UnitTest/"/>
    
    
  </entry>
  
  <entry>
    <title>Praxis 19. Consider the drawback to the throws clause.</title>
    <link href="http://balicanta.tw/2015/06/25/praxis-19-consider-the-drawback-to-the-throws-clause/"/>
    <id>http://balicanta.tw/2015/06/25/praxis-19-consider-the-drawback-to-the-throws-clause/</id>
    <published>2015-06-24T21:48:08.000Z</published>
    <updated>2019-06-15T14:40:17.104Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Throws-給開發者帶來的好處"><a href="#Throws-給開發者帶來的好處" class="headerlink" title="Throws 給開發者帶來的好處"></a>Throws 給開發者帶來的好處</h3><p>透過 Throws 的幫助，開發者可以一眼在 method signature 看出，這個 method 可能產生什麼副作用，這是一個理想的情況下，但有時候會發現有的開發者會這麼作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public void theCalling() throws Exception&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這樣的資訊，能透露的訊息相當有限，絕大部分可能是偷懶所造成。</p><h3 id="當-Worker-Method-不小心產生了一個新的-exception"><a href="#當-Worker-Method-不小心產生了一個新的-exception" class="headerlink" title="當 Worker Method 不小心產生了一個新的 exception"></a>當 Worker Method 不小心產生了一個新的 exception</h3><p><strong>Worker method</strong> 指的是一些基礎的方法，到處都會調用到的，整個 Project 裡調用的比例非常高，像是 logging method 、某些 util 的方法。</p><p>試想像一個情境，你手邊的專案開發了四年，已經有成千上萬行程式碼， logging method 也被調用過無數次了，此時 logging method 需要調整為 log to cloud ，所以他會增加多個不同的 exception ，這時候，可能有兩種方法可以解決：</p><ol><li>logging method 自行 catch ，解決這個問題。</li><li>讓 logging method 往外拋，在 method signature 加上 throws。</li></ol><p>如果這些新出現的 exception 都是 logging method 可以 handle 的，那問題也許不會太嚴重，一但有些 exception 是 logging method 無法處理的，必須要往外拋，那他一連串的調用方就都需要調整，這變動的程度可以說是相當的大。</p><p>在專案開始的時候， Exception 的設計必須要小心，但在軟體以及外圍環境極速變動的狀況下，即便設計的很完整，還是有可能會發生悲劇，所以要清楚的了解 throws 帶來的好與壞。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Throws-給開發者帶來的好處&quot;&gt;&lt;a href=&quot;#Throws-給開發者帶來的好處&quot; class=&quot;headerlink&quot; title=&quot;Throws 給開發者帶來的好處&quot;&gt;&lt;/a&gt;Throws 給開發者帶來的好處&lt;/h3&gt;&lt;p&gt;透過 Throws 的幫助，
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Praxis 18. 永遠不要隱藏任何一個異常</title>
    <link href="http://balicanta.tw/2015/06/24/praxis-18-never-hide-an-exception/"/>
    <id>http://balicanta.tw/2015/06/24/praxis-18-never-hide-an-exception/</id>
    <published>2015-06-23T22:53:45.000Z</published>
    <updated>2019-06-16T15:54:51.553Z</updated>
    
    <content type="html"><![CDATA[<h3 id="消失的-Exception"><a href="#消失的-Exception" class="headerlink" title="消失的 Exception"></a>消失的 Exception</h3><p>在 Java 的開發裡面，常常會遇見 Exception 的連鎖效應，也就是當 Exception A 發生的時候，觸發了 Exception B 再觸發了 Exception C ，最後 Caller method 只會收到 Exception C ，無法知道 Exception A 才是真正的原因。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public void demoException() throws Exception&#123;</span><br><span class="line">    try&#123;</span><br><span class="line">        throw new (&quot;Exception A&quot;);</span><br><span class="line">    &#125; catch (Exception e)&#123;</span><br><span class="line">        throw new Exception(&quot;Exception B&quot;);</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        throw new Exception(&quot;Exception C&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此時此刻，調用方只會收到 Exception C ，其它的 Exception 都被吞掉了。</p><h3 id="NestableException-粉墨登場"><a href="#NestableException-粉墨登場" class="headerlink" title="NestableException 粉墨登場"></a>NestableException 粉墨登場</h3><p>這個問題，老祖宗們都已經幫忙解決過了， <a href="https://commons.apache.org/proper/commons-lang/" target="_blank" rel="noopener">Apache Common Lang</a> 在 1.0 以後就提供了 <a href="https://commons.apache.org/proper/commons-lang/javadocs/api-2.5/org/apache/commons/lang/exception/NestableException.html" target="_blank" rel="noopener">NestableException</a>，改寫上面的方法就會變成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public void demoException() throws Exception&#123;</span><br><span class="line">    try&#123;</span><br><span class="line">        throw new (&quot;Exception A&quot;);</span><br><span class="line">    &#125; catch (Exception e)&#123;</span><br><span class="line">        throw new NestableException(&quot;Exception B&quot;, e);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後再透過 <code>e.printStackTrace();</code> 就可以將整體的 Exception 歷程給呈現出來。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;消失的-Exception&quot;&gt;&lt;a href=&quot;#消失的-Exception&quot; class=&quot;headerlink&quot; title=&quot;消失的 Exception&quot;&gt;&lt;/a&gt;消失的 Exception&lt;/h3&gt;&lt;p&gt;在 Java 的開發裡面，常常會遇見 Excepti
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Praxis 17. Never ignore an exception 永遠不要忽略異常</title>
    <link href="http://balicanta.tw/2015/06/23/praxis-17-never-ignore-an-exception/"/>
    <id>http://balicanta.tw/2015/06/23/praxis-17-never-ignore-an-exception/</id>
    <published>2015-06-22T23:23:02.000Z</published>
    <updated>2019-06-15T14:42:28.335Z</updated>
    
    <content type="html"><![CDATA[<h3 id="遇到異常的處理方式"><a href="#遇到異常的處理方式" class="headerlink" title="遇到異常的處理方式"></a>遇到異常的處理方式</h3><p>當 Java 產生一個異常的時候，處置的方式分為下列四種：</p><ul><li>捕捉並處理，防止向 caller 擴散 ( Propagate )</li><li>捕捉並再一次拋出，讓他向 caller 擴散</li><li>捕捉後，拋出一個新異常給 caller</li><li>不捕捉，讓他直接向 Caller 擴散</li></ul><p>在 Checked Exception 後面三項的處理方式，Java 會強制要求在 method signature 加上 <code>throw</code>。</p><h3 id="千萬不要把異常給吞了"><a href="#千萬不要把異常給吞了" class="headerlink" title="千萬不要把異常給吞了"></a>千萬不要把異常給吞了</h3><p>在開發的過程中，一定會出現某個 method 會拋出 Exception ，這時候 IDE 會貼心的提醒開發者，記得加上 Try catch ，然而最要命的就是加上下面這種：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">try&#123;</span><br><span class="line">    throw new IOException();</span><br><span class="line">&#125; catch (IOException exception) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 catch 區塊完全不處理，一旦發生怪異的錯誤，是很難追查的，最少也得加上一行 logger ，以方便我們追查到底發生了什麼事，最好的狀況是加上 printStackTrace，stackTrace 會把我們發生的錯誤以 Stack 的方式來顯示，對追找錯誤是相當有幫助的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;遇到異常的處理方式&quot;&gt;&lt;a href=&quot;#遇到異常的處理方式&quot; class=&quot;headerlink&quot; title=&quot;遇到異常的處理方式&quot;&gt;&lt;/a&gt;遇到異常的處理方式&lt;/h3&gt;&lt;p&gt;當 Java 產生一個異常的時候，處置的方式分為下列四種：&lt;/p&gt;
&lt;ul&gt;
&lt;li
      
    
    </summary>
    
      <category term="Java" scheme="http://balicanta.tw/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>Praxis 16. 理解異常處理的執行流程</title>
    <link href="http://balicanta.tw/2015/06/21/praxis-16-know-the-mechanics-of-exception-control-flow/"/>
    <id>http://balicanta.tw/2015/06/21/praxis-16-know-the-mechanics-of-exception-control-flow/</id>
    <published>2015-06-20T23:04:40.000Z</published>
    <updated>2019-06-15T14:54:03.655Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Exception-的-control-flow"><a href="#Exception-的-control-flow" class="headerlink" title="Exception 的 control flow"></a>Exception 的 control flow</h3><p>Java 的異常控制是有助於協助程式處理異常狀況的發生，儘管這些年來在 Checked Exception 和 Unchecked Exception 上有很多的討論，在各種設計上都建議減少 Checked Exception.<br>但 Java 所設計的 Exception 對於異常狀況的發生，還是對程式的強健性 (Robust) 是有一定程度的提升。</p><p>在 Java 裡一旦發生 Exception ，程式的流程會往下列三個地方移動：</p><ul><li>Catch block</li><li>finally block</li><li>calling method</li></ul><p>這樣的情形下，就發生了討厭的 Goto 行為(程式執行流程跳來跳去)，增加程式除錯的難度。</p><h3 id="難以猜測程式執行流程"><a href="#難以猜測程式執行流程" class="headerlink" title="難以猜測程式執行流程"></a>難以猜測程式執行流程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m3</span><span class="params">(<span class="keyword">boolean</span> isThrow)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Enter m3"</span>);</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        Button b3 = <span class="keyword">new</span> Button();</span><br><span class="line">        <span class="keyword">if</span>(isThrow)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"Enter m3 Finllay"</span>);  <span class="comment">// 1</span></span><br><span class="line">    &#125;</span><br><span class="line">     System.out.println(<span class="string">"Exist m3"</span>);  <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的程式碼，呈現一個簡單的 try catch 情境，這個 try 並沒有 catch 只有 finally 區塊，而在 finally 區塊結束一行，再加上一行 Print 。</p><p>執行結果為：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Enter m3 </span><br><span class="line">Enter m3 Finally</span><br></pre></td></tr></table></figure><p>也就是說最行一行的 <code>Exist m3</code> 並沒有被執行，在執行完 finally 後，就離開了。</p><h3 id="Try-Catch-的執行原則"><a href="#Try-Catch-的執行原則" class="headerlink" title="Try Catch 的執行原則"></a>Try Catch 的執行原則</h3><ul><li>如果同時存在 catch block 以及 finally block ，一旦產生異常會先執行 catch block ，再執行 finally block，如果沒有 catch block 就會直接執行 finally block</li><li>如果沒有 catch block ，無論異常是否發生都會執行 finally block</li><li>如果異常發生，沒有被 catch ，無論是否執行 finally， 之後的 statement 將不被執行。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Exception-的-control-flow&quot;&gt;&lt;a href=&quot;#Exception-的-control-flow&quot; class=&quot;headerlink&quot; title=&quot;Exception 的 control flow&quot;&gt;&lt;/a&gt;Exception 的 co
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>開源之道，Open Source Enlightenment - 唐鳳</title>
    <link href="http://balicanta.tw/2015/06/20/open-source-enlightenment/"/>
    <id>http://balicanta.tw/2015/06/20/open-source-enlightenment/</id>
    <published>2015-06-19T23:49:23.000Z</published>
    <updated>2019-05-29T15:37:02.000Z</updated>
    
    <content type="html"><![CDATA[<iframe allowfullscreen frameborder="0" height="465" src="https://www.youtube.com/embed/A6bBcvSyg0k?feature=oembed" width="620"></iframe><iframe allowfullscreen frameborder="0" height="356" marginheight="0" marginwidth="0" scrolling="no" src="https://www.slideshare.net/slideshow/embed_code/key/KmTDwvSquN5LLu" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" width="427"></iframe><h3 id="illusion-of-transparency"><a href="#illusion-of-transparency" class="headerlink" title="illusion of transparency"></a>illusion of transparency</h3><ul><li>透明度錯覺，以為別人知道自己的內心狀態</li><li>很容易成對的產生 fundamental attribution error ，別人做了一件事，就把他扣上一個帽子，也許只是一個特定的情境，才會產生這種行為，並非刻意</li></ul><h3 id="Rough-Consensus"><a href="#Rough-Consensus" class="headerlink" title="Rough ! Consensus"></a>Rough ! Consensus</h3><ul><li>粗略的共識</li><li>共識不是壓倒別人的想法，否則可能會變成粗暴的共識</li><li>接受各種可能性</li></ul><h3 id="Be-Bold"><a href="#Be-Bold" class="headerlink" title="Be Bold"></a>Be Bold</h3><ul><li>在 Internet 上得到正確答案的方法，不是問一個問題，而是說一個錯誤的答案。</li><li>萬事萬物都有缺口，缺口就是光的入口。</li></ul><h3 id="Ofun-Optimizing-for-Fun-的四個元素"><a href="#Ofun-Optimizing-for-Fun-的四個元素" class="headerlink" title="-Ofun Optimizing for Fun 的四個元素"></a>-Ofun Optimizing for Fun 的四個元素</h3><ul><li>穩定的支持</li><li>安全的空間</li><li>不受限制的活動</li><li>產生不同的看世界的看法</li></ul><h3 id="透過-Git-Basic-來面對生活"><a href="#透過-Git-Basic-來面對生活" class="headerlink" title="透過 Git Basic 來面對生活"></a>透過 Git Basic 來面對生活</h3><ul><li>Fetch new fact</li><li>Merge with understanding</li><li>Commit to an action</li><li>Push it to the world</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;iframe allowfullscreen frameborder=&quot;0&quot; height=&quot;465&quot; src=&quot;https://www.youtube.com/embed/A6bBcvSyg0k?feature=oembed&quot; width=&quot;620&quot;&gt;&lt;/iframe&gt;

&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>如何測試一個 Private 的方法？</title>
    <link href="http://balicanta.tw/2015/06/13/how-to-test-private-method/"/>
    <id>http://balicanta.tw/2015/06/13/how-to-test-private-method/</id>
    <published>2015-06-12T20:36:58.000Z</published>
    <updated>2019-06-08T04:23:54.987Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Private-方法真的需要測試嗎？"><a href="#Private-方法真的需要測試嗎？" class="headerlink" title="Private 方法真的需要測試嗎？"></a>Private 方法真的需要測試嗎？</h3><p>這樣的討論通常都是兩邊都有道理， 兩派的意見分別為：</p><ul><li>Private 方法必然是很單純，所以應該是簡單到不能出錯，所以 <strong>不用測？</strong></li><li>Private 方法有時候會有一些複雜度，所以還是需要測試。</li></ul><p>我個人的意見是我認為 Private method 的粒度一定是相對來說比較小的，可以確保小範圍的測試是正確的，何樂不為？</p><h3 id="Private-方法只能在自身-Class-讀取，該如何測試？"><a href="#Private-方法只能在自身-Class-讀取，該如何測試？" class="headerlink" title="Private 方法只能在自身 Class 讀取，該如何測試？"></a>Private 方法只能在自身 Class 讀取，該如何測試？</h3><p>回顧 Java 的 Access Level 看<a href>下表</a>最為簡單清楚，</p><p><table><thead><tr><th>Modifier</th><th style="text-align: center;">Class</th><th style="text-align: center;">Package</th><th>Subclass</th><th style="text-align: left;">World</th></tr></thead><tbody><tr><td>public</td><td style="text-align: center;">Y</td><td style="text-align: center;">Y</td><td>Y</td><td style="text-align: left;">Y</td></tr><tr><td>protected</td><td style="text-align: center;">Y</td><td style="text-align: center;">Y</td><td>Y</td><td style="text-align: left;">N</td></tr><tr><td>no modifier</td><td style="text-align: center;">Y</td><td style="text-align: center;">Y</td><td>N</td><td style="text-align: left;">N</td></tr><tr><td>private</td><td style="text-align: center;">Y</td><td style="text-align: center;">N</td><td>N</td><td style="text-align: left;">N</td></tr></tbody></table>可以透過 <strong>No Modifier</strong> 的特性，有些書本上會寫這是 <strong>default</strong> 或是 <strong>package level private </strong> 都是在指同一件事，就是在 Access Level 的地方留空，也就是一個 method 會從 <code>private void hello()</code> 變成 <code>void hello()</code>。這樣的好處是只要透過一樣的 Package path ，就可以讀取到 package level private 的方法。</p><p>但這樣的缺點的就是在語意和概念上，就是一個 <code>private method</code> 但我們在 code 的呈現上就會懷疑這個 default level 的 method 是不是少加了 <code>private</code>？</p><h3 id="VisibleForTesting-Annotation-登場"><a href="#VisibleForTesting-Annotation-登場" class="headerlink" title="VisibleForTesting Annotation 登場"></a>VisibleForTesting Annotation 登場</h3><p>在上面可能產生程式碼語意上的表達不清楚，於是就有了 <code>@VisibleForTesting</code> 來協助解決問題，而方法就會長得像：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@VisiableForTesting</span><br><span class="line">int add(int a , int b) &#123;</span><br><span class="line">    return a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>盡管看起來有一點怪，但讀程式的人就可以了解，Access Level 被去掉的原因，可能是因為測試的關係，就不會擅自去加 <code>private</code> 導致測試無法正常運作。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Private-方法真的需要測試嗎？&quot;&gt;&lt;a href=&quot;#Private-方法真的需要測試嗎？&quot; class=&quot;headerlink&quot; title=&quot;Private 方法真的需要測試嗎？&quot;&gt;&lt;/a&gt;Private 方法真的需要測試嗎？&lt;/h3&gt;&lt;p&gt;這樣的討論通
      
    
    </summary>
    
      <category term="UnitTest" scheme="http://balicanta.tw/categories/UnitTest/"/>
    
    
  </entry>
  
  <entry>
    <title>StringBuilder, StringBuffer 差異</title>
    <link href="http://balicanta.tw/2015/05/26/stringbuilder-stringbuffer-difference/"/>
    <id>http://balicanta.tw/2015/05/26/stringbuilder-stringbuffer-difference/</id>
    <published>2015-05-25T20:01:50.000Z</published>
    <updated>2019-06-08T04:37:25.407Z</updated>
    
    <content type="html"><![CDATA[<p>String 串接是寫程式很常會遇見的情境，在 Java 中，字串相加是最不理想方式，因為會產生大量 String Object 在 String Pool 中，比較建議的方式是透過 StringBuilder 或 StringBuffer 來完成任務，但兩個的差異看起來只有一點點，但會影響其使用情境。</p><h3 id="共同點"><a href="#共同點" class="headerlink" title="共同點"></a>共同點</h3><ul><li>兩者都繼承 <code>AbstractStringBuilder</code> ，所以底層實作都是以 char array 來完成。</li><li>兩者的方法幾乎一致。</li></ul><h3 id="差異點"><a href="#差異點" class="headerlink" title="差異點"></a>差異點</h3><ul><li><code>StringBuffer</code> 是 synchronized，亦代表為Thread-safe</li><li><code>StringBuilder</code> 不是 synchronized，代表 Performance 會比較 <code>StringBuffer</code> 好一點，但也代表 <code>StringBuilder</code> 是 non-thread-safe 的。</li></ul><h3 id="補充"><a href="#補充" class="headerlink" title="補充"></a>補充</h3><p><a href="https://issues.apache.org/jira/browse/LANG-779" target="_blank" rel="noopener">Apache LANG 779 issue</a> 討論 ToStringBuilder 是否需要使用 StringBuffer。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;String 串接是寫程式很常會遇見的情境，在 Java 中，字串相加是最不理想方式，因為會產生大量 String Object 在 String Pool 中，比較建議的方式是透過 StringBuilder 或 StringBuffer 來完成任務，但兩個的差異看起來只
      
    
    </summary>
    
      <category term="Java" scheme="http://balicanta.tw/categories/Java/"/>
    
    
      <category term="interview" scheme="http://balicanta.tw/tags/interview/"/>
    
  </entry>
  
</feed>
